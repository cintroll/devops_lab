pipeline {
    agent any
    stages {
        stage('Docker Login') {
            steps {
                script {
                    def account_id = sh(returnStdout: true, script: 'aws sts get-caller-identity --query "Account" --output text').trim()
                    def region = sh(returnStdout: true, script: "ec2-metadata --availability-zone | sed 's/[a-z]\$//' | sed 's/placement:\\ //'").trim()
                    def repository  = "${account_id}.dkr.ecr.${region}.amazonaws.com"

                    sh "docker login -u AWS -p \$(aws ecr get-login-password --region ${region}) ${repository}"
                }
            }
        }

        stage('Docker Build and Push') {
            steps {
                script {
                    def account_id = sh(returnStdout: true, script: 'aws sts get-caller-identity --query "Account" --output text').trim()
                    def region = sh(returnStdout: true, script: "ec2-metadata --availability-zone | sed 's/[a-z]\$//' | sed 's/placement:\\ //'").trim()
                    def repository  = "${account_id}.dkr.ecr.${region}.amazonaws.com"
                    def git_hash = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
                    def image_name = "${repository}/app_python:${git_hash}"

                    dir('workload/app') {
                        sh "docker login -u AWS -p \$(aws ecr get-login-password --region ${region}) ${repository}"
                        sh "docker build . -t app_python"
                        sh "docker tag app_python:latest ${repository}/app_python:${git_hash}"
                        sh "docker push '${image_name}'"
                    }
                }
            }
        }

        stage('Manifest Apply') {
            steps {
                script {
                    def account_id = sh(returnStdout: true, script: 'aws sts get-caller-identity --query "Account" --output text').trim()
                    def region = sh(returnStdout: true, script: "ec2-metadata --availability-zone | sed 's/[a-z]\$//' | sed 's/placement:\\ //'").trim()
                    def repository  = "${account_id}.dkr.ecr.${region}.amazonaws.com"
                    def git_hash = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
                    def image_name = "${repository}/app_python:${git_hash}"

                    sh "IMAGE_NAME=\"${image_name}\" envsubst < deployment.yaml | kubectl apply -f -"
                    sh "kubectl get ingress/app_python-ingress -n app_python"
                }
            }
        }
    }

    post {
        always {
            script {
                def account_id = sh(returnStdout: true, script: 'aws sts get-caller-identity --query "Account" --output text').trim()
                def region = sh(returnStdout: true, script: "ec2-metadata --availability-zone | sed 's/[a-z]\$//' | sed 's/placement:\\ //'").trim()
                def repository  = "${account_id}.dkr.ecr.${region}.amazonaws.com"
                
                sh "docker logout ${repository}"                
            }
        }
    }
}